from flask import Blueprint, jsonify, request
from datetime import datetime

api_bp = Blueprint('api', __name__)

@api_bp.route('/')
def api_home():
    """API home endpoint"""
    return jsonify({
        'message': 'Welcome to the API',
        'version': '1.0.0',
        'timestamp': datetime.utcnow().isoformat()
    })

@api_bp.route('/users', methods=['GET'])
def get_users():
    """Get all users"""
    # Example data - replace with actual database query
    users = [
        {'id': 1, 'name': 'John Doe', 'email': 'john@example.com'},
        {'id': 2, 'name': 'Jane Smith', 'email': 'jane@example.com'}
    ]
    return jsonify({'users': users})

@api_bp.route('/users', methods=['POST'])
def create_user():
    """Create a new user"""
    data = request.get_json()
    
    if not data or 'name' not in data or 'email' not in data:
        return jsonify({'error': 'Name and email are required'}), 400
    
    # Example validation and creation logic
    new_user = {
        'id': 3,  # In real app, this would be generated by database
        'name': data['name'],
        'email': data['email'],
        'created_at': datetime.utcnow().isoformat()
    }
    
    return jsonify({'user': new_user}), 201

@api_bp.route('/users/<int:user_id>', methods=['GET'])
def get_user(user_id):
    """Get a specific user by ID"""
    # Example data - replace with actual database query
    if user_id == 1:
        user = {'id': 1, 'name': 'John Doe', 'email': 'john@example.com'}
        return jsonify({'user': user})
    else:
        return jsonify({'error': 'User not found'}), 404

@api_bp.route('/users/<int:user_id>', methods=['PUT'])
def update_user(user_id):
    """Update a specific user"""
    data = request.get_json()
    
    if not data:
        return jsonify({'error': 'No data provided'}), 400
    
    # Example update logic
    updated_user = {
        'id': user_id,
        'name': data.get('name', 'Updated Name'),
        'email': data.get('email', 'updated@example.com'),
        'updated_at': datetime.utcnow().isoformat()
    }
    
    return jsonify({'user': updated_user})

@api_bp.route('/users/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    """Delete a specific user"""
    # Example deletion logic
    return jsonify({'message': f'User {user_id} deleted successfully'}), 200
